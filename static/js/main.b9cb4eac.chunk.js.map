{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","_ref","assignNewQuoteIndex","selectedQuote","react_default","a","createElement","Card","CardContent","className","Typography","id","quote","author","CardActions","Button","variant","color","size","onClick","IconButton","target","href","concat","index_es","icon","faTwitter","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","selectedQuoteIndex","generateNewQuoteIndex","bind","assertThisInitialized","_this2","fetch","then","data","json","setState","length","random","Grid","classes","container","justify","xs","lg","item","components_QuoteMachine","Number","isInteger","React","Component","withStyles","alignItems","display","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UA6CeA,SAlCM,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,oBAAqBC,EAAxBF,EAAwBE,cAAxB,OACnBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAaC,UAAU,QACrBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,GAAG,QAAf,IACIR,EAAcS,MADlB,MAC4B,IAC1BR,EAAAC,EAAAC,cAAA,QAAMK,GAAG,UAAUR,EAAcU,UAIrCT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAaL,UAAU,QACrBL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEJ,GAAG,YACHK,QAAQ,WACRC,MAAM,UACNC,KAAK,SACLC,QAASjB,GALX,aASAE,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACET,GAAG,cACHO,KAAK,SACLD,MAAM,UACNI,OAAO,SACPC,KAAI,yCAAAC,OACFpB,EAAcS,MADZ,oBAIJR,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAiBC,KAAMC,WCxBzBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GACRC,mBAAoB,MAEtBT,EAAKU,sBAAwBV,EAAKU,sBAAsBC,KAA3BV,OAAAW,EAAA,EAAAX,CAAAD,IAC7BA,EAAK3B,oBAAsB2B,EAAK3B,oBAAoBsC,KAAzBV,OAAAW,EAAA,EAAAX,CAAAD,IAPVA,mFAUC,IAAAa,EAAAV,KAClBW,MACE,yIAECC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAP,GAAM,OAAIK,EAAKK,SAAS,CAAEV,UAAUK,EAAKxC,uEAiBjD,GAAK8B,KAAKI,MAAMC,OAAOW,OAGvB,OAAOC,iBAAO,EAAGjB,KAAKI,MAAMC,OAAOW,OAAS,iDAI5ChB,KAAKe,SAAS,CAAET,mBAAoBN,KAAKO,2DAIzC,OACEnC,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CACEzC,UAAWuB,KAAKJ,MAAMuB,QAAQC,UAC9BzC,GAAG,YACH0C,QAAQ,SACRD,WAAS,GAEThD,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAMI,GAAI,EAAGC,GAAI,EAAGC,MAAI,GACrBxB,KAAK7B,cACJC,EAAAC,EAAAC,cAACmD,EAAD,CACEtD,cAAe6B,KAAK7B,cACpBD,oBAAqB8B,KAAK9B,sBAE1B,6CArCV,GACG8B,KAAKI,MAAMC,OAAOW,QAClBU,OAAOC,UAAU3B,KAAKI,MAAME,oBAI/B,OAAON,KAAKI,MAAMC,OAAOL,KAAKI,MAAME,2BA1BtBsB,IAAMC,WAgETC,cAxEA,CACbV,UAAW,CACTW,WAAY,SACZC,QAAS,OACTC,OAAQ,UAoEGH,CAAmBnC,GCnEduC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.b9cb4eac.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport '../App.css';\r\n\r\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\r\n  <Card>\r\n    <CardContent className='card'>\r\n      <Typography id='text'>\r\n        \"{selectedQuote.quote}\" -{' '}\r\n        <span id='author'>{selectedQuote.author}</span>\r\n      </Typography>\r\n    </CardContent>\r\n\r\n    <CardActions className='card'>\r\n      <Button\r\n        id='new-quote'\r\n        variant='outlined'\r\n        color='primary'\r\n        size='medium'\r\n        onClick={assignNewQuoteIndex}\r\n      >\r\n        New Quote\r\n      </Button>\r\n      <IconButton\r\n        id='tweet-quote'\r\n        size='medium'\r\n        color='primary'\r\n        target='_blank'\r\n        href={`https://twitter.com/intent/tweet?text=${\r\n          selectedQuote.quote\r\n        }&hashtags=quote`}\r\n      >\r\n        <FontAwesomeIcon icon={faTwitter} />\r\n      </IconButton>\r\n    </CardActions>\r\n  </Card>\r\n);\r\n\r\nexport default QuoteMachine;\r\n","import React from 'react';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport { Grid, withStyles } from '@material-ui/core';\nimport QuoteMachine from './components/QuoteMachine';\nimport '../src/App.css';\n\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh'\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedQuoteIndex: null\n    };\n    this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this);\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\n      'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n    )\n      .then(data => data.json())\n      .then(quotes => this.setState({ quotes }, this.assignNewQuoteIndex));\n  }\n\n  get selectedQuote() {\n    if (\n      !this.state.quotes.length ||\n      !Number.isInteger(this.state.selectedQuoteIndex)\n    ) {\n      return undefined;\n    }\n    return this.state.quotes[this.state.selectedQuoteIndex];\n  }\n  /**\n   * Return an integer representing an index in state.quotes\n   * If state.quotes is empty, returns undefined\n   */\n  generateNewQuoteIndex() {\n    if (!this.state.quotes.length) {\n      return undefined;\n    }\n    return random(0, this.state.quotes.length - 1);\n  }\n\n  assignNewQuoteIndex() {\n    this.setState({ selectedQuoteIndex: this.generateNewQuoteIndex() });\n  }\n\n  render() {\n    return (\n      <Grid\n        className={this.props.classes.container}\n        id='quote-box'\n        justify='center'\n        container\n      >\n        <Grid xs={9} lg={5} item>\n          {this.selectedQuote ? (\n            <QuoteMachine\n              selectedQuote={this.selectedQuote}\n              assignNewQuoteIndex={this.assignNewQuoteIndex}\n            />\n          ) : null}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}